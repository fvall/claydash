/* automatically generated by rust-bindgen 0.71.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char, __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char, __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char, __endptr: *mut *mut ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"][::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"][::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"][::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"][::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"][::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"][::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"][::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"][::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"][::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"][::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"][::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"][::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"][::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"][::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"][::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"][::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"][::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"][::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"][::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"][::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"][::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"][::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"][::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"][::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"][::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"][::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"][::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"][::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"][::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"][::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"][::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"][::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"][::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"][::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"][::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"][::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"][::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"][::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"][::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"][::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"][::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"][::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"][::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"][::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char, __buf: *mut random_data) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"][::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"][::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long, __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort, __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort, __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(__nmemb: ::std::os::raw::c_ulong, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(__status: ::std::os::raw::c_int, __arg: *mut ::std::os::raw::c_void),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize, __size: usize, __compar: __compar_fn_t);
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong, __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mm_sfence();
}
unsafe extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
unsafe extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _mm_lfence();
}
unsafe extern "C" {
    pub fn _mm_mfence();
}
unsafe extern "C" {
    pub fn _mm_pause();
}
unsafe extern "C" {
    pub static mut CLAY__ELEMENT_DEFINITION_LATCH: u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_String {
    pub isStaticallyAllocated: bool,
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_String"][::std::mem::size_of::<Clay_String>() - 16usize];
    ["Alignment of Clay_String"][::std::mem::align_of::<Clay_String>() - 8usize];
    ["Offset of field: Clay_String::isStaticallyAllocated"]
        [::std::mem::offset_of!(Clay_String, isStaticallyAllocated) - 0usize];
    ["Offset of field: Clay_String::length"][::std::mem::offset_of!(Clay_String, length) - 4usize];
    ["Offset of field: Clay_String::chars"][::std::mem::offset_of!(Clay_String, chars) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_StringSlice {
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
    pub baseChars: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_StringSlice"][::std::mem::size_of::<Clay_StringSlice>() - 24usize];
    ["Alignment of Clay_StringSlice"][::std::mem::align_of::<Clay_StringSlice>() - 8usize];
    ["Offset of field: Clay_StringSlice::length"][::std::mem::offset_of!(Clay_StringSlice, length) - 0usize];
    ["Offset of field: Clay_StringSlice::chars"][::std::mem::offset_of!(Clay_StringSlice, chars) - 8usize];
    ["Offset of field: Clay_StringSlice::baseChars"][::std::mem::offset_of!(Clay_StringSlice, baseChars) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Arena {
    pub nextAllocation: usize,
    pub capacity: usize,
    pub memory: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Arena"][::std::mem::size_of::<Clay_Arena>() - 24usize];
    ["Alignment of Clay_Arena"][::std::mem::align_of::<Clay_Arena>() - 8usize];
    ["Offset of field: Clay_Arena::nextAllocation"][::std::mem::offset_of!(Clay_Arena, nextAllocation) - 0usize];
    ["Offset of field: Clay_Arena::capacity"][::std::mem::offset_of!(Clay_Arena, capacity) - 8usize];
    ["Offset of field: Clay_Arena::memory"][::std::mem::offset_of!(Clay_Arena, memory) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Dimensions {
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Dimensions"][::std::mem::size_of::<Clay_Dimensions>() - 8usize];
    ["Alignment of Clay_Dimensions"][::std::mem::align_of::<Clay_Dimensions>() - 4usize];
    ["Offset of field: Clay_Dimensions::width"][::std::mem::offset_of!(Clay_Dimensions, width) - 0usize];
    ["Offset of field: Clay_Dimensions::height"][::std::mem::offset_of!(Clay_Dimensions, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Vector2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Vector2"][::std::mem::size_of::<Clay_Vector2>() - 8usize];
    ["Alignment of Clay_Vector2"][::std::mem::align_of::<Clay_Vector2>() - 4usize];
    ["Offset of field: Clay_Vector2::x"][::std::mem::offset_of!(Clay_Vector2, x) - 0usize];
    ["Offset of field: Clay_Vector2::y"][::std::mem::offset_of!(Clay_Vector2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Color"][::std::mem::size_of::<Clay_Color>() - 16usize];
    ["Alignment of Clay_Color"][::std::mem::align_of::<Clay_Color>() - 4usize];
    ["Offset of field: Clay_Color::r"][::std::mem::offset_of!(Clay_Color, r) - 0usize];
    ["Offset of field: Clay_Color::g"][::std::mem::offset_of!(Clay_Color, g) - 4usize];
    ["Offset of field: Clay_Color::b"][::std::mem::offset_of!(Clay_Color, b) - 8usize];
    ["Offset of field: Clay_Color::a"][::std::mem::offset_of!(Clay_Color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BoundingBox {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BoundingBox"][::std::mem::size_of::<Clay_BoundingBox>() - 16usize];
    ["Alignment of Clay_BoundingBox"][::std::mem::align_of::<Clay_BoundingBox>() - 4usize];
    ["Offset of field: Clay_BoundingBox::x"][::std::mem::offset_of!(Clay_BoundingBox, x) - 0usize];
    ["Offset of field: Clay_BoundingBox::y"][::std::mem::offset_of!(Clay_BoundingBox, y) - 4usize];
    ["Offset of field: Clay_BoundingBox::width"][::std::mem::offset_of!(Clay_BoundingBox, width) - 8usize];
    ["Offset of field: Clay_BoundingBox::height"][::std::mem::offset_of!(Clay_BoundingBox, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementId {
    pub id: u32,
    pub offset: u32,
    pub baseId: u32,
    pub stringId: Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementId"][::std::mem::size_of::<Clay_ElementId>() - 32usize];
    ["Alignment of Clay_ElementId"][::std::mem::align_of::<Clay_ElementId>() - 8usize];
    ["Offset of field: Clay_ElementId::id"][::std::mem::offset_of!(Clay_ElementId, id) - 0usize];
    ["Offset of field: Clay_ElementId::offset"][::std::mem::offset_of!(Clay_ElementId, offset) - 4usize];
    ["Offset of field: Clay_ElementId::baseId"][::std::mem::offset_of!(Clay_ElementId, baseId) - 8usize];
    ["Offset of field: Clay_ElementId::stringId"][::std::mem::offset_of!(Clay_ElementId, stringId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CornerRadius {
    pub topLeft: f32,
    pub topRight: f32,
    pub bottomLeft: f32,
    pub bottomRight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CornerRadius"][::std::mem::size_of::<Clay_CornerRadius>() - 16usize];
    ["Alignment of Clay_CornerRadius"][::std::mem::align_of::<Clay_CornerRadius>() - 4usize];
    ["Offset of field: Clay_CornerRadius::topLeft"][::std::mem::offset_of!(Clay_CornerRadius, topLeft) - 0usize];
    ["Offset of field: Clay_CornerRadius::topRight"][::std::mem::offset_of!(Clay_CornerRadius, topRight) - 4usize];
    ["Offset of field: Clay_CornerRadius::bottomLeft"][::std::mem::offset_of!(Clay_CornerRadius, bottomLeft) - 8usize];
    ["Offset of field: Clay_CornerRadius::bottomRight"]
        [::std::mem::offset_of!(Clay_CornerRadius, bottomRight) - 12usize];
};
pub const Clay_LayoutDirection_CLAY_LEFT_TO_RIGHT: Clay_LayoutDirection = 0;
pub const Clay_LayoutDirection_CLAY_TOP_TO_BOTTOM: Clay_LayoutDirection = 1;
pub type Clay_LayoutDirection = ::std::os::raw::c_uchar;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_LEFT: Clay_LayoutAlignmentX = 0;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_RIGHT: Clay_LayoutAlignmentX = 1;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_CENTER: Clay_LayoutAlignmentX = 2;
pub type Clay_LayoutAlignmentX = ::std::os::raw::c_uchar;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_TOP: Clay_LayoutAlignmentY = 0;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_BOTTOM: Clay_LayoutAlignmentY = 1;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_CENTER: Clay_LayoutAlignmentY = 2;
pub type Clay_LayoutAlignmentY = ::std::os::raw::c_uchar;
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIT: Clay__SizingType = 0;
pub const Clay__SizingType_CLAY__SIZING_TYPE_GROW: Clay__SizingType = 1;
pub const Clay__SizingType_CLAY__SIZING_TYPE_PERCENT: Clay__SizingType = 2;
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIXED: Clay__SizingType = 3;
pub type Clay__SizingType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ChildAlignment {
    pub x: Clay_LayoutAlignmentX,
    pub y: Clay_LayoutAlignmentY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ChildAlignment"][::std::mem::size_of::<Clay_ChildAlignment>() - 2usize];
    ["Alignment of Clay_ChildAlignment"][::std::mem::align_of::<Clay_ChildAlignment>() - 1usize];
    ["Offset of field: Clay_ChildAlignment::x"][::std::mem::offset_of!(Clay_ChildAlignment, x) - 0usize];
    ["Offset of field: Clay_ChildAlignment::y"][::std::mem::offset_of!(Clay_ChildAlignment, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_SizingMinMax {
    pub min: f32,
    pub max: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingMinMax"][::std::mem::size_of::<Clay_SizingMinMax>() - 8usize];
    ["Alignment of Clay_SizingMinMax"][::std::mem::align_of::<Clay_SizingMinMax>() - 4usize];
    ["Offset of field: Clay_SizingMinMax::min"][::std::mem::offset_of!(Clay_SizingMinMax, min) - 0usize];
    ["Offset of field: Clay_SizingMinMax::max"][::std::mem::offset_of!(Clay_SizingMinMax, max) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_SizingAxis {
    pub size: Clay_SizingAxis__bindgen_ty_1,
    pub type_: Clay__SizingType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_SizingAxis__bindgen_ty_1 {
    pub minMax: Clay_SizingMinMax,
    pub percent: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis__bindgen_ty_1"][::std::mem::size_of::<Clay_SizingAxis__bindgen_ty_1>() - 8usize];
    ["Alignment of Clay_SizingAxis__bindgen_ty_1"][::std::mem::align_of::<Clay_SizingAxis__bindgen_ty_1>() - 4usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::minMax"]
        [::std::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, minMax) - 0usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::percent"]
        [::std::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, percent) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis"][::std::mem::size_of::<Clay_SizingAxis>() - 12usize];
    ["Alignment of Clay_SizingAxis"][::std::mem::align_of::<Clay_SizingAxis>() - 4usize];
    ["Offset of field: Clay_SizingAxis::size"][::std::mem::offset_of!(Clay_SizingAxis, size) - 0usize];
    ["Offset of field: Clay_SizingAxis::type_"][::std::mem::offset_of!(Clay_SizingAxis, type_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_Sizing {
    pub width: Clay_SizingAxis,
    pub height: Clay_SizingAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Sizing"][::std::mem::size_of::<Clay_Sizing>() - 24usize];
    ["Alignment of Clay_Sizing"][::std::mem::align_of::<Clay_Sizing>() - 4usize];
    ["Offset of field: Clay_Sizing::width"][::std::mem::offset_of!(Clay_Sizing, width) - 0usize];
    ["Offset of field: Clay_Sizing::height"][::std::mem::offset_of!(Clay_Sizing, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Padding {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Padding"][::std::mem::size_of::<Clay_Padding>() - 8usize];
    ["Alignment of Clay_Padding"][::std::mem::align_of::<Clay_Padding>() - 2usize];
    ["Offset of field: Clay_Padding::left"][::std::mem::offset_of!(Clay_Padding, left) - 0usize];
    ["Offset of field: Clay_Padding::right"][::std::mem::offset_of!(Clay_Padding, right) - 2usize];
    ["Offset of field: Clay_Padding::top"][::std::mem::offset_of!(Clay_Padding, top) - 4usize];
    ["Offset of field: Clay_Padding::bottom"][::std::mem::offset_of!(Clay_Padding, bottom) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_PaddingWrapper {
    pub wrapped: Clay_Padding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PaddingWrapper"][::std::mem::size_of::<Clay__Clay_PaddingWrapper>() - 8usize];
    ["Alignment of Clay__Clay_PaddingWrapper"][::std::mem::align_of::<Clay__Clay_PaddingWrapper>() - 2usize];
    ["Offset of field: Clay__Clay_PaddingWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_PaddingWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_LayoutConfig {
    pub sizing: Clay_Sizing,
    pub padding: Clay_Padding,
    pub childGap: u16,
    pub childAlignment: Clay_ChildAlignment,
    pub layoutDirection: Clay_LayoutDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_LayoutConfig"][::std::mem::size_of::<Clay_LayoutConfig>() - 40usize];
    ["Alignment of Clay_LayoutConfig"][::std::mem::align_of::<Clay_LayoutConfig>() - 4usize];
    ["Offset of field: Clay_LayoutConfig::sizing"][::std::mem::offset_of!(Clay_LayoutConfig, sizing) - 0usize];
    ["Offset of field: Clay_LayoutConfig::padding"][::std::mem::offset_of!(Clay_LayoutConfig, padding) - 24usize];
    ["Offset of field: Clay_LayoutConfig::childGap"][::std::mem::offset_of!(Clay_LayoutConfig, childGap) - 32usize];
    ["Offset of field: Clay_LayoutConfig::childAlignment"]
        [::std::mem::offset_of!(Clay_LayoutConfig, childAlignment) - 34usize];
    ["Offset of field: Clay_LayoutConfig::layoutDirection"]
        [::std::mem::offset_of!(Clay_LayoutConfig, layoutDirection) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_LayoutConfigWrapper {
    pub wrapped: Clay_LayoutConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutConfigWrapper"][::std::mem::size_of::<Clay__Clay_LayoutConfigWrapper>() - 40usize];
    ["Alignment of Clay__Clay_LayoutConfigWrapper"][::std::mem::align_of::<Clay__Clay_LayoutConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_LayoutConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_LayoutConfigWrapper, wrapped) - 0usize];
};
unsafe extern "C" {
    pub static mut CLAY_LAYOUT_DEFAULT: Clay_LayoutConfig;
}
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_WORDS: Clay_TextElementConfigWrapMode = 0;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NEWLINES: Clay_TextElementConfigWrapMode = 1;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NONE: Clay_TextElementConfigWrapMode = 2;
pub type Clay_TextElementConfigWrapMode = ::std::os::raw::c_uchar;
pub const Clay_TextAlignment_CLAY_TEXT_ALIGN_LEFT: Clay_TextAlignment = 0;
pub const Clay_TextAlignment_CLAY_TEXT_ALIGN_CENTER: Clay_TextAlignment = 1;
pub const Clay_TextAlignment_CLAY_TEXT_ALIGN_RIGHT: Clay_TextAlignment = 2;
pub type Clay_TextAlignment = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextElementConfig {
    pub userData: *mut ::std::os::raw::c_void,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
    pub wrapMode: Clay_TextElementConfigWrapMode,
    pub textAlignment: Clay_TextAlignment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_TextElementConfig"][::std::mem::size_of::<Clay_TextElementConfig>() - 40usize];
    ["Alignment of Clay_TextElementConfig"][::std::mem::align_of::<Clay_TextElementConfig>() - 8usize];
    ["Offset of field: Clay_TextElementConfig::userData"]
        [::std::mem::offset_of!(Clay_TextElementConfig, userData) - 0usize];
    ["Offset of field: Clay_TextElementConfig::textColor"]
        [::std::mem::offset_of!(Clay_TextElementConfig, textColor) - 8usize];
    ["Offset of field: Clay_TextElementConfig::fontId"]
        [::std::mem::offset_of!(Clay_TextElementConfig, fontId) - 24usize];
    ["Offset of field: Clay_TextElementConfig::fontSize"]
        [::std::mem::offset_of!(Clay_TextElementConfig, fontSize) - 26usize];
    ["Offset of field: Clay_TextElementConfig::letterSpacing"]
        [::std::mem::offset_of!(Clay_TextElementConfig, letterSpacing) - 28usize];
    ["Offset of field: Clay_TextElementConfig::lineHeight"]
        [::std::mem::offset_of!(Clay_TextElementConfig, lineHeight) - 30usize];
    ["Offset of field: Clay_TextElementConfig::wrapMode"]
        [::std::mem::offset_of!(Clay_TextElementConfig, wrapMode) - 32usize];
    ["Offset of field: Clay_TextElementConfig::textAlignment"]
        [::std::mem::offset_of!(Clay_TextElementConfig, textAlignment) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_TextElementConfigWrapper {
    pub wrapped: Clay_TextElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_TextElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_TextElementConfigWrapper>() - 40usize];
    ["Alignment of Clay__Clay_TextElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_TextElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_TextElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_TextElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageElementConfig {
    pub imageData: *mut ::std::os::raw::c_void,
    pub sourceDimensions: Clay_Dimensions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ImageElementConfig"][::std::mem::size_of::<Clay_ImageElementConfig>() - 16usize];
    ["Alignment of Clay_ImageElementConfig"][::std::mem::align_of::<Clay_ImageElementConfig>() - 8usize];
    ["Offset of field: Clay_ImageElementConfig::imageData"]
        [::std::mem::offset_of!(Clay_ImageElementConfig, imageData) - 0usize];
    ["Offset of field: Clay_ImageElementConfig::sourceDimensions"]
        [::std::mem::offset_of!(Clay_ImageElementConfig, sourceDimensions) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ImageElementConfigWrapper {
    pub wrapped: Clay_ImageElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ImageElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_ImageElementConfigWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ImageElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_ImageElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ImageElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ImageElementConfigWrapper, wrapped) - 0usize];
};
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_TOP: Clay_FloatingAttachPointType = 0;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_CENTER: Clay_FloatingAttachPointType = 1;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_BOTTOM: Clay_FloatingAttachPointType = 2;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_TOP: Clay_FloatingAttachPointType = 3;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_CENTER: Clay_FloatingAttachPointType = 4;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_BOTTOM: Clay_FloatingAttachPointType = 5;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_TOP: Clay_FloatingAttachPointType = 6;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_CENTER: Clay_FloatingAttachPointType = 7;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_BOTTOM: Clay_FloatingAttachPointType = 8;
pub type Clay_FloatingAttachPointType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingAttachPoints {
    pub element: Clay_FloatingAttachPointType,
    pub parent: Clay_FloatingAttachPointType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingAttachPoints"][::std::mem::size_of::<Clay_FloatingAttachPoints>() - 2usize];
    ["Alignment of Clay_FloatingAttachPoints"][::std::mem::align_of::<Clay_FloatingAttachPoints>() - 1usize];
    ["Offset of field: Clay_FloatingAttachPoints::element"]
        [::std::mem::offset_of!(Clay_FloatingAttachPoints, element) - 0usize];
    ["Offset of field: Clay_FloatingAttachPoints::parent"]
        [::std::mem::offset_of!(Clay_FloatingAttachPoints, parent) - 1usize];
};
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_CAPTURE: Clay_PointerCaptureMode = 0;
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH: Clay_PointerCaptureMode = 1;
pub type Clay_PointerCaptureMode = ::std::os::raw::c_uchar;
pub const Clay_FloatingAttachToElement_CLAY_ATTACH_TO_NONE: Clay_FloatingAttachToElement = 0;
pub const Clay_FloatingAttachToElement_CLAY_ATTACH_TO_PARENT: Clay_FloatingAttachToElement = 1;
pub const Clay_FloatingAttachToElement_CLAY_ATTACH_TO_ELEMENT_WITH_ID: Clay_FloatingAttachToElement = 2;
pub const Clay_FloatingAttachToElement_CLAY_ATTACH_TO_ROOT: Clay_FloatingAttachToElement = 3;
pub type Clay_FloatingAttachToElement = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingElementConfig {
    pub offset: Clay_Vector2,
    pub expand: Clay_Dimensions,
    pub parentId: u32,
    pub zIndex: i16,
    pub attachPoints: Clay_FloatingAttachPoints,
    pub pointerCaptureMode: Clay_PointerCaptureMode,
    pub attachTo: Clay_FloatingAttachToElement,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingElementConfig"][::std::mem::size_of::<Clay_FloatingElementConfig>() - 28usize];
    ["Alignment of Clay_FloatingElementConfig"][::std::mem::align_of::<Clay_FloatingElementConfig>() - 4usize];
    ["Offset of field: Clay_FloatingElementConfig::offset"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, offset) - 0usize];
    ["Offset of field: Clay_FloatingElementConfig::expand"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, expand) - 8usize];
    ["Offset of field: Clay_FloatingElementConfig::parentId"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, parentId) - 16usize];
    ["Offset of field: Clay_FloatingElementConfig::zIndex"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, zIndex) - 20usize];
    ["Offset of field: Clay_FloatingElementConfig::attachPoints"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, attachPoints) - 22usize];
    ["Offset of field: Clay_FloatingElementConfig::pointerCaptureMode"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, pointerCaptureMode) - 24usize];
    ["Offset of field: Clay_FloatingElementConfig::attachTo"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, attachTo) - 25usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingElementConfigWrapper {
    pub wrapped: Clay_FloatingElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_FloatingElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_FloatingElementConfigWrapper>() - 28usize];
    ["Alignment of Clay__Clay_FloatingElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_FloatingElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_FloatingElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_FloatingElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomElementConfig {
    pub customData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CustomElementConfig"][::std::mem::size_of::<Clay_CustomElementConfig>() - 8usize];
    ["Alignment of Clay_CustomElementConfig"][::std::mem::align_of::<Clay_CustomElementConfig>() - 8usize];
    ["Offset of field: Clay_CustomElementConfig::customData"]
        [::std::mem::offset_of!(Clay_CustomElementConfig, customData) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_CustomElementConfigWrapper {
    pub wrapped: Clay_CustomElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_CustomElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Alignment of Clay__Clay_CustomElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_CustomElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_CustomElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollElementConfig {
    pub horizontal: bool,
    pub vertical: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollElementConfig"][::std::mem::size_of::<Clay_ScrollElementConfig>() - 2usize];
    ["Alignment of Clay_ScrollElementConfig"][::std::mem::align_of::<Clay_ScrollElementConfig>() - 1usize];
    ["Offset of field: Clay_ScrollElementConfig::horizontal"]
        [::std::mem::offset_of!(Clay_ScrollElementConfig, horizontal) - 0usize];
    ["Offset of field: Clay_ScrollElementConfig::vertical"]
        [::std::mem::offset_of!(Clay_ScrollElementConfig, vertical) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ScrollElementConfigWrapper {
    pub wrapped: Clay_ScrollElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ScrollElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_ScrollElementConfigWrapper>() - 2usize];
    ["Alignment of Clay__Clay_ScrollElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_ScrollElementConfigWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_ScrollElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ScrollElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BorderWidth {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
    pub betweenChildren: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderWidth"][::std::mem::size_of::<Clay_BorderWidth>() - 10usize];
    ["Alignment of Clay_BorderWidth"][::std::mem::align_of::<Clay_BorderWidth>() - 2usize];
    ["Offset of field: Clay_BorderWidth::left"][::std::mem::offset_of!(Clay_BorderWidth, left) - 0usize];
    ["Offset of field: Clay_BorderWidth::right"][::std::mem::offset_of!(Clay_BorderWidth, right) - 2usize];
    ["Offset of field: Clay_BorderWidth::top"][::std::mem::offset_of!(Clay_BorderWidth, top) - 4usize];
    ["Offset of field: Clay_BorderWidth::bottom"][::std::mem::offset_of!(Clay_BorderWidth, bottom) - 6usize];
    ["Offset of field: Clay_BorderWidth::betweenChildren"]
        [::std::mem::offset_of!(Clay_BorderWidth, betweenChildren) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BorderElementConfig {
    pub color: Clay_Color,
    pub width: Clay_BorderWidth,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderElementConfig"][::std::mem::size_of::<Clay_BorderElementConfig>() - 28usize];
    ["Alignment of Clay_BorderElementConfig"][::std::mem::align_of::<Clay_BorderElementConfig>() - 4usize];
    ["Offset of field: Clay_BorderElementConfig::color"]
        [::std::mem::offset_of!(Clay_BorderElementConfig, color) - 0usize];
    ["Offset of field: Clay_BorderElementConfig::width"]
        [::std::mem::offset_of!(Clay_BorderElementConfig, width) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_BorderElementConfigWrapper {
    pub wrapped: Clay_BorderElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_BorderElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_BorderElementConfigWrapper>() - 28usize];
    ["Alignment of Clay__Clay_BorderElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_BorderElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_BorderElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_BorderElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextRenderData {
    pub stringContents: Clay_StringSlice,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_TextRenderData"][::std::mem::size_of::<Clay_TextRenderData>() - 48usize];
    ["Alignment of Clay_TextRenderData"][::std::mem::align_of::<Clay_TextRenderData>() - 8usize];
    ["Offset of field: Clay_TextRenderData::stringContents"]
        [::std::mem::offset_of!(Clay_TextRenderData, stringContents) - 0usize];
    ["Offset of field: Clay_TextRenderData::textColor"]
        [::std::mem::offset_of!(Clay_TextRenderData, textColor) - 24usize];
    ["Offset of field: Clay_TextRenderData::fontId"][::std::mem::offset_of!(Clay_TextRenderData, fontId) - 40usize];
    ["Offset of field: Clay_TextRenderData::fontSize"][::std::mem::offset_of!(Clay_TextRenderData, fontSize) - 42usize];
    ["Offset of field: Clay_TextRenderData::letterSpacing"]
        [::std::mem::offset_of!(Clay_TextRenderData, letterSpacing) - 44usize];
    ["Offset of field: Clay_TextRenderData::lineHeight"]
        [::std::mem::offset_of!(Clay_TextRenderData, lineHeight) - 46usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RectangleRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RectangleRenderData"][::std::mem::size_of::<Clay_RectangleRenderData>() - 32usize];
    ["Alignment of Clay_RectangleRenderData"][::std::mem::align_of::<Clay_RectangleRenderData>() - 4usize];
    ["Offset of field: Clay_RectangleRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_RectangleRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_RectangleRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_RectangleRenderData, cornerRadius) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub sourceDimensions: Clay_Dimensions,
    pub imageData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ImageRenderData"][::std::mem::size_of::<Clay_ImageRenderData>() - 48usize];
    ["Alignment of Clay_ImageRenderData"][::std::mem::align_of::<Clay_ImageRenderData>() - 8usize];
    ["Offset of field: Clay_ImageRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_ImageRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_ImageRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_ImageRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_ImageRenderData::sourceDimensions"]
        [::std::mem::offset_of!(Clay_ImageRenderData, sourceDimensions) - 32usize];
    ["Offset of field: Clay_ImageRenderData::imageData"]
        [::std::mem::offset_of!(Clay_ImageRenderData, imageData) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub customData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CustomRenderData"][::std::mem::size_of::<Clay_CustomRenderData>() - 40usize];
    ["Alignment of Clay_CustomRenderData"][::std::mem::align_of::<Clay_CustomRenderData>() - 8usize];
    ["Offset of field: Clay_CustomRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_CustomRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_CustomRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_CustomRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_CustomRenderData::customData"]
        [::std::mem::offset_of!(Clay_CustomRenderData, customData) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollRenderData {
    pub horizontal: bool,
    pub vertical: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollRenderData"][::std::mem::size_of::<Clay_ScrollRenderData>() - 2usize];
    ["Alignment of Clay_ScrollRenderData"][::std::mem::align_of::<Clay_ScrollRenderData>() - 1usize];
    ["Offset of field: Clay_ScrollRenderData::horizontal"]
        [::std::mem::offset_of!(Clay_ScrollRenderData, horizontal) - 0usize];
    ["Offset of field: Clay_ScrollRenderData::vertical"]
        [::std::mem::offset_of!(Clay_ScrollRenderData, vertical) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BorderRenderData {
    pub color: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub width: Clay_BorderWidth,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderRenderData"][::std::mem::size_of::<Clay_BorderRenderData>() - 44usize];
    ["Alignment of Clay_BorderRenderData"][::std::mem::align_of::<Clay_BorderRenderData>() - 4usize];
    ["Offset of field: Clay_BorderRenderData::color"][::std::mem::offset_of!(Clay_BorderRenderData, color) - 0usize];
    ["Offset of field: Clay_BorderRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_BorderRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_BorderRenderData::width"][::std::mem::offset_of!(Clay_BorderRenderData, width) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_RenderData {
    pub rectangle: Clay_RectangleRenderData,
    pub text: Clay_TextRenderData,
    pub image: Clay_ImageRenderData,
    pub custom: Clay_CustomRenderData,
    pub border: Clay_BorderRenderData,
    pub scroll: Clay_ScrollRenderData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderData"][::std::mem::size_of::<Clay_RenderData>() - 48usize];
    ["Alignment of Clay_RenderData"][::std::mem::align_of::<Clay_RenderData>() - 8usize];
    ["Offset of field: Clay_RenderData::rectangle"][::std::mem::offset_of!(Clay_RenderData, rectangle) - 0usize];
    ["Offset of field: Clay_RenderData::text"][::std::mem::offset_of!(Clay_RenderData, text) - 0usize];
    ["Offset of field: Clay_RenderData::image"][::std::mem::offset_of!(Clay_RenderData, image) - 0usize];
    ["Offset of field: Clay_RenderData::custom"][::std::mem::offset_of!(Clay_RenderData, custom) - 0usize];
    ["Offset of field: Clay_RenderData::border"][::std::mem::offset_of!(Clay_RenderData, border) - 0usize];
    ["Offset of field: Clay_RenderData::scroll"][::std::mem::offset_of!(Clay_RenderData, scroll) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollContainerData {
    pub scrollPosition: *mut Clay_Vector2,
    pub scrollContainerDimensions: Clay_Dimensions,
    pub contentDimensions: Clay_Dimensions,
    pub config: Clay_ScrollElementConfig,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollContainerData"][::std::mem::size_of::<Clay_ScrollContainerData>() - 32usize];
    ["Alignment of Clay_ScrollContainerData"][::std::mem::align_of::<Clay_ScrollContainerData>() - 8usize];
    ["Offset of field: Clay_ScrollContainerData::scrollPosition"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, scrollPosition) - 0usize];
    ["Offset of field: Clay_ScrollContainerData::scrollContainerDimensions"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, scrollContainerDimensions) - 8usize];
    ["Offset of field: Clay_ScrollContainerData::contentDimensions"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, contentDimensions) - 16usize];
    ["Offset of field: Clay_ScrollContainerData::config"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, config) - 24usize];
    ["Offset of field: Clay_ScrollContainerData::found"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, found) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementData {
    pub boundingBox: Clay_BoundingBox,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementData"][::std::mem::size_of::<Clay_ElementData>() - 20usize];
    ["Alignment of Clay_ElementData"][::std::mem::align_of::<Clay_ElementData>() - 4usize];
    ["Offset of field: Clay_ElementData::boundingBox"][::std::mem::offset_of!(Clay_ElementData, boundingBox) - 0usize];
    ["Offset of field: Clay_ElementData::found"][::std::mem::offset_of!(Clay_ElementData, found) - 16usize];
};
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_NONE: Clay_RenderCommandType = 0;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_RECTANGLE: Clay_RenderCommandType = 1;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_BORDER: Clay_RenderCommandType = 2;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_TEXT: Clay_RenderCommandType = 3;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_IMAGE: Clay_RenderCommandType = 4;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_START: Clay_RenderCommandType = 5;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_END: Clay_RenderCommandType = 6;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_CUSTOM: Clay_RenderCommandType = 7;
pub type Clay_RenderCommandType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_RenderCommand {
    pub boundingBox: Clay_BoundingBox,
    pub renderData: Clay_RenderData,
    pub userData: *mut ::std::os::raw::c_void,
    pub id: u32,
    pub zIndex: i16,
    pub commandType: Clay_RenderCommandType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommand"][::std::mem::size_of::<Clay_RenderCommand>() - 80usize];
    ["Alignment of Clay_RenderCommand"][::std::mem::align_of::<Clay_RenderCommand>() - 8usize];
    ["Offset of field: Clay_RenderCommand::boundingBox"]
        [::std::mem::offset_of!(Clay_RenderCommand, boundingBox) - 0usize];
    ["Offset of field: Clay_RenderCommand::renderData"]
        [::std::mem::offset_of!(Clay_RenderCommand, renderData) - 16usize];
    ["Offset of field: Clay_RenderCommand::userData"][::std::mem::offset_of!(Clay_RenderCommand, userData) - 64usize];
    ["Offset of field: Clay_RenderCommand::id"][::std::mem::offset_of!(Clay_RenderCommand, id) - 72usize];
    ["Offset of field: Clay_RenderCommand::zIndex"][::std::mem::offset_of!(Clay_RenderCommand, zIndex) - 76usize];
    ["Offset of field: Clay_RenderCommand::commandType"]
        [::std::mem::offset_of!(Clay_RenderCommand, commandType) - 78usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RenderCommandArray {
    pub capacity: i32,
    pub length: i32,
    pub internalArray: *mut Clay_RenderCommand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommandArray"][::std::mem::size_of::<Clay_RenderCommandArray>() - 16usize];
    ["Alignment of Clay_RenderCommandArray"][::std::mem::align_of::<Clay_RenderCommandArray>() - 8usize];
    ["Offset of field: Clay_RenderCommandArray::capacity"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, capacity) - 0usize];
    ["Offset of field: Clay_RenderCommandArray::length"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, length) - 4usize];
    ["Offset of field: Clay_RenderCommandArray::internalArray"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, internalArray) - 8usize];
};
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED_THIS_FRAME: Clay_PointerDataInteractionState = 0;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED: Clay_PointerDataInteractionState = 1;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED_THIS_FRAME: Clay_PointerDataInteractionState = 2;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED: Clay_PointerDataInteractionState = 3;
pub type Clay_PointerDataInteractionState = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_PointerData {
    pub position: Clay_Vector2,
    pub state: Clay_PointerDataInteractionState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_PointerData"][::std::mem::size_of::<Clay_PointerData>() - 12usize];
    ["Alignment of Clay_PointerData"][::std::mem::align_of::<Clay_PointerData>() - 4usize];
    ["Offset of field: Clay_PointerData::position"][::std::mem::offset_of!(Clay_PointerData, position) - 0usize];
    ["Offset of field: Clay_PointerData::state"][::std::mem::offset_of!(Clay_PointerData, state) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_ElementDeclaration {
    pub id: Clay_ElementId,
    pub layout: Clay_LayoutConfig,
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub image: Clay_ImageElementConfig,
    pub floating: Clay_FloatingElementConfig,
    pub custom: Clay_CustomElementConfig,
    pub scroll: Clay_ScrollElementConfig,
    pub border: Clay_BorderElementConfig,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementDeclaration"][::std::mem::size_of::<Clay_ElementDeclaration>() - 200usize];
    ["Alignment of Clay_ElementDeclaration"][::std::mem::align_of::<Clay_ElementDeclaration>() - 8usize];
    ["Offset of field: Clay_ElementDeclaration::id"][::std::mem::offset_of!(Clay_ElementDeclaration, id) - 0usize];
    ["Offset of field: Clay_ElementDeclaration::layout"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, layout) - 32usize];
    ["Offset of field: Clay_ElementDeclaration::backgroundColor"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, backgroundColor) - 72usize];
    ["Offset of field: Clay_ElementDeclaration::cornerRadius"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, cornerRadius) - 88usize];
    ["Offset of field: Clay_ElementDeclaration::image"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, image) - 104usize];
    ["Offset of field: Clay_ElementDeclaration::floating"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, floating) - 120usize];
    ["Offset of field: Clay_ElementDeclaration::custom"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, custom) - 152usize];
    ["Offset of field: Clay_ElementDeclaration::scroll"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, scroll) - 160usize];
    ["Offset of field: Clay_ElementDeclaration::border"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, border) - 164usize];
    ["Offset of field: Clay_ElementDeclaration::userData"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, userData) - 192usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_ElementDeclarationWrapper {
    pub wrapped: Clay_ElementDeclaration,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementDeclarationWrapper"]
        [::std::mem::size_of::<Clay__Clay_ElementDeclarationWrapper>() - 200usize];
    ["Alignment of Clay__Clay_ElementDeclarationWrapper"]
        [::std::mem::align_of::<Clay__Clay_ElementDeclarationWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ElementDeclarationWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ElementDeclarationWrapper, wrapped) - 0usize];
};
pub const Clay_ErrorType_CLAY_ERROR_TYPE_TEXT_MEASUREMENT_FUNCTION_NOT_PROVIDED: Clay_ErrorType = 0;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_ARENA_CAPACITY_EXCEEDED: Clay_ErrorType = 1;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_ELEMENTS_CAPACITY_EXCEEDED: Clay_ErrorType = 2;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_TEXT_MEASUREMENT_CAPACITY_EXCEEDED: Clay_ErrorType = 3;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_DUPLICATE_ID: Clay_ErrorType = 4;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_FLOATING_CONTAINER_PARENT_NOT_FOUND: Clay_ErrorType = 5;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_PERCENTAGE_OVER_1: Clay_ErrorType = 6;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_INTERNAL_ERROR: Clay_ErrorType = 7;
pub type Clay_ErrorType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorData {
    pub errorType: Clay_ErrorType,
    pub errorText: Clay_String,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorData"][::std::mem::size_of::<Clay_ErrorData>() - 32usize];
    ["Alignment of Clay_ErrorData"][::std::mem::align_of::<Clay_ErrorData>() - 8usize];
    ["Offset of field: Clay_ErrorData::errorType"][::std::mem::offset_of!(Clay_ErrorData, errorType) - 0usize];
    ["Offset of field: Clay_ErrorData::errorText"][::std::mem::offset_of!(Clay_ErrorData, errorText) - 8usize];
    ["Offset of field: Clay_ErrorData::userData"][::std::mem::offset_of!(Clay_ErrorData, userData) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorHandler {
    pub errorHandlerFunction: ::std::option::Option<unsafe extern "C" fn(errorText: Clay_ErrorData)>,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorHandler"][::std::mem::size_of::<Clay_ErrorHandler>() - 16usize];
    ["Alignment of Clay_ErrorHandler"][::std::mem::align_of::<Clay_ErrorHandler>() - 8usize];
    ["Offset of field: Clay_ErrorHandler::errorHandlerFunction"]
        [::std::mem::offset_of!(Clay_ErrorHandler, errorHandlerFunction) - 0usize];
    ["Offset of field: Clay_ErrorHandler::userData"][::std::mem::offset_of!(Clay_ErrorHandler, userData) - 8usize];
};
unsafe extern "C" {
    pub fn Clay_MinMemorySize() -> u32;
}
unsafe extern "C" {
    pub fn Clay_CreateArenaWithCapacityAndMemory(capacity: usize, memory: *mut ::std::os::raw::c_void) -> Clay_Arena;
}
unsafe extern "C" {
    pub fn Clay_SetPointerState(position: Clay_Vector2, pointerDown: bool);
}
unsafe extern "C" {
    pub fn Clay_Initialize(
        arena: Clay_Arena,
        layoutDimensions: Clay_Dimensions,
        errorHandler: Clay_ErrorHandler,
    ) -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_GetCurrentContext() -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_SetCurrentContext(context: *mut Clay_Context);
}
unsafe extern "C" {
    pub fn Clay_UpdateScrollContainers(enableDragScrolling: bool, scrollDelta: Clay_Vector2, deltaTime: f32);
}
unsafe extern "C" {
    pub fn Clay_SetLayoutDimensions(dimensions: Clay_Dimensions);
}
unsafe extern "C" {
    pub fn Clay_BeginLayout();
}
unsafe extern "C" {
    pub fn Clay_EndLayout() -> Clay_RenderCommandArray;
}
unsafe extern "C" {
    pub fn Clay_GetElementId(idString: Clay_String) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementIdWithIndex(idString: Clay_String, index: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementData(id: Clay_ElementId) -> Clay_ElementData;
}
unsafe extern "C" {
    pub fn Clay_Hovered() -> bool;
}
unsafe extern "C" {
    pub fn Clay_OnHover(
        onHoverFunction: ::std::option::Option<
            unsafe extern "C" fn(elementId: Clay_ElementId, pointerData: Clay_PointerData, userData: isize),
        >,
        userData: isize,
    );
}
unsafe extern "C" {
    pub fn Clay_PointerOver(elementId: Clay_ElementId) -> bool;
}
unsafe extern "C" {
    pub fn Clay_GetScrollContainerData(id: Clay_ElementId) -> Clay_ScrollContainerData;
}
unsafe extern "C" {
    pub fn Clay_SetMeasureTextFunction(
        measureTextFunction: ::std::option::Option<
            unsafe extern "C" fn(
                text: Clay_StringSlice,
                config: *mut Clay_TextElementConfig,
                userData: *mut ::std::os::raw::c_void,
            ) -> Clay_Dimensions,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_SetQueryScrollOffsetFunction(
        queryScrollOffsetFunction: ::std::option::Option<
            unsafe extern "C" fn(elementId: u32, userData: *mut ::std::os::raw::c_void) -> Clay_Vector2,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_RenderCommandArray_Get(array: *mut Clay_RenderCommandArray, index: i32) -> *mut Clay_RenderCommand;
}
unsafe extern "C" {
    pub fn Clay_SetDebugModeEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_IsDebugModeEnabled() -> bool;
}
unsafe extern "C" {
    pub fn Clay_SetCullingEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_GetMaxElementCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxElementCount(maxElementCount: i32);
}
unsafe extern "C" {
    pub fn Clay_GetMaxMeasureTextCacheWordCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxMeasureTextCacheWordCount(maxMeasureTextCacheWordCount: i32);
}
unsafe extern "C" {
    pub fn Clay_ResetMeasureTextCache();
}
unsafe extern "C" {
    pub fn Clay__OpenElement();
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElement(config: Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElementPtr(config: *const Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__CloseElement();
}
unsafe extern "C" {
    pub fn Clay__HashString(key: Clay_String, offset: u32, seed: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay__OpenTextElement(text: Clay_String, textConfig: *mut Clay_TextElementConfig);
}
unsafe extern "C" {
    pub fn Clay__StoreTextElementConfig(config: Clay_TextElementConfig) -> *mut Clay_TextElementConfig;
}
unsafe extern "C" {
    pub fn Clay__GetParentElementId() -> u32;
}
unsafe extern "C" {
    pub static mut Clay__debugViewHighlightColor: Clay_Color;
}
unsafe extern "C" {
    pub static mut Clay__debugViewWidth: u32;
}
